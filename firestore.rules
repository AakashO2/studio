/**
 * @fileoverview Firestore Security Rules for PasswordForge.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data.
 *
 * Data Structure:
 * - Users are stored in `/users/{userId}`.
 * - Password entries are stored in `/users/{userId}/passwords/{passwordId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own user document and password entries.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * The `userId` is included in both the user document ID and the `PasswordEntry` documents to simplify and optimize authorization checks, avoiding the need for costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own user document.
     * @allow (get, update, delete) Authenticated user accesses their own user document.
     * @deny (create) Unauthorized user attempts to create a user document for another user.
     * @deny (get, update, delete) Unauthorized user attempts to access another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to password entries for a specific user.
     * @path /users/{userId}/passwords/{passwordId}
     * @allow (create) Authenticated user creates a password entry under their user document.
     * @allow (get, update, delete) Authenticated user accesses password entries under their user document.
     * @deny (create) Unauthorized user attempts to create a password entry for another user.
     * @deny (get, update, delete) Unauthorized user attempts to access another user's password entries.
     * @principle Enforces document ownership for all operations on password entries.
     */
    match /users/{userId}/passwords/{passwordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}