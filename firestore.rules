/**
 * @fileoverview Firestore Security Rules for PasswordForge.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model. Each user
 * has complete control over their data stored under their specific user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with {userId} matching the Firebase Auth UID.
 * - /users/{userId}/passwords/{passwordId}: Stores password entries, nested under each user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents.
 * - Users can only create, read, update, and delete password entries associated with their user ID.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `userId` is present in both the user document path and the `PasswordEntry` document. This allows
 *   for efficient authorization checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc if the document id matches their uid.
     * @allow (get) - User with UID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) - User with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - User with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the requesting user id and the resource user id are the same
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to password entries for a specific user.
     * @path /users/{userId}/passwords/{passwordId}
     * @allow (create) - User with UID 'user_abc' can create a password entry under /users/user_abc/passwords/password_1.
     * @allow (get) - User with UID 'user_abc' can read their password entry at /users/user_abc/passwords/password_1.
     * @allow (update) - User with UID 'user_abc' can update their password entry at /users/user_abc/passwords/password_1.
     * @allow (delete) - User with UID 'user_abc' can delete their password entry at /users/user_abc/passwords/password_1.
     * @deny (create) - User with UID 'user_xyz' cannot create a password entry under /users/user_abc/passwords/password_1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/passwords/{passwordId} {
       //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the requesting user id and the resource user id are the same
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}