/**
 * @fileoverview Firestore Security Rules for PasswordForge.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their own data.
 *
 * Data Structure:
 * - Users are stored in `/users/{userId}`.
 * - Password entries are stored in `/users/{userId}/passwords/{passwordId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own user document and password entries.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * The `PasswordEntry` documents are stored as subcollections of the user documents.
 * This approach provides inherent ownership via the path and, more importantly, allows for easy querying of passwords associated with a specific user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users/{userId} collection.  Allows a user to read and write their own user document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own document.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can access their own document.
     * @deny (create) - Authenticated user cannot create a document with a different UID.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/passwords/{passwordId} collection. Allows a user to manage their own passwords.
     * @path /databases/{database}/documents/users/{userId}/passwords/{passwordId}
     * @allow (create, get, list, update, delete) - Authenticated user with matching UID can access their own password entries.
     * @deny (create, get, list, update, delete) - Authenticated user cannot access another user's password entries.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/passwords/{passwordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}