rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own document.
     * @allow (get) User with UID 'user123' can read their own document.
     * @allow (update) User with UID 'user123' can update their own document.
     * @allow (delete) User with UID 'user123' can delete their own document.
     * @deny (create) User with UID 'user456' cannot create a document for user 'user123'.
     * @deny (get) User with UID 'user456' cannot read the document of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to password entries for a specific user.
     * @path /users/{userId}/passwords/{passwordId}
     * @allow (create) User with UID 'user123' can create a password entry in their own subcollection.
     * @allow (get) User with UID 'user123' can read a password entry in their own subcollection.
     * @allow (update) User with UID 'user123' can update a password entry in their own subcollection.
     * @allow (delete) User with UID 'user123' can delete a password entry in their own subcollection.
     * @deny (create) User with UID 'user456' cannot create a password entry in user 'user123's subcollection.
     * @deny (get) User with UID 'user456' cannot read password entries in user 'user123's subcollection.
     * @principle Restricts password entries to the owning user.
     */
    match /users/{userId}/passwords/{passwordId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}